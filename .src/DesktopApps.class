' Gambas class file

' Innova Project - Launcher of APP
'
' Copyright (C) Herberth GuzmÃ¡n
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Homepage: http://http://sourceforge.net/projects/innovadesktop
' This code belongs to Fabien Bodard and was adapted for Innova Project

Export

Property Read IconName As String
Property Read Exec_R As String

Property Read NoDisplay As Boolean
Property Read DisplayOnlyIn As Boolean

Property Read NotShowIn As String

Property Read file_path As String

Public _$IconName As String
Public _$Path As String
Public _$Exec As String
Public _$NoDisplay As Boolean
Public _$DisplayOnlyIn As String
Public _$NotShowIn As String

Public Language As String = ((Left(System.Language, 2)))

Public PropertyValue As New Collection

Private $hImage As Image
Static Private $aDataDir As String[]
Static Private $cApps As New Collection
Static Private $aApps As String[]
Static Private $cAppsPath As New Collection
Static Private anotherdirs As String[]


Static Private sLanguage As String[] = Split(System.Language, "_", "", True, False)

Static Public Sub MakeAppList()
  Dim path As String
  Dim sPath As String

  $aApps = New String[]

  For Each sPath In GetDataDir()
    If Not Exist(sPath &/ "applications", True) Then Continue
    AddFile(sPath &/ "applications")
  Next

  For Each path In anotherdirs
    AddFile(path, False)    
  Next

  'AddFile("/usr/share/kde4/services/")
  $aApps.Sort(gb.Natural)

End


Static Public ProcWarm As Process

Static Public Sub WarmCache()
  'load desktop files in the kernel pagecache in background, then load them into higgins
  Dim sPath As String
  Dim WarmList As String = " "
  Dim warmcmd As String = "" 

  For Each sPath In GetDataDir()
    Debug "Warming recursive: " & (sPath &/ "applications")
    WarmList &= sPath &/ "applications" & " "
  Next
  
  
  For Each sPath In anotherdirs
    Debug "Warming norecursive " & sPath
    WarmList &= sPath & " "
  Next
  
  warmcmd = "nice -n 19 ionice -c3 find " & WarmList & " -iname \"*.desktop\" -type f -exec cat {} \\; > /dev/null ; "
  warmcmd &= "nice -n 19 ionice -c3 find " & WarmList & " -maxdepth 1 -iname \"*.desktop\"  -type f -exec cat {} \\; > /dev/null ; "
  
  ProcWarm = Shell warmcmd For Read As "ProcWarm" 

End

Static Public Sub ProcWarm_kill()
  If IsNull($aApps) Then 
    MakeAppList()
  Endif
End





Static Private Sub AddFile(sPath As String, Optional recursive As Boolean = True)
  
  Dim s As String
  Dim IsDesktopFileOut As Boolean = False
  If Not Exist(sPath, True) Then Return
  For Each s In Dir(sPath)
    If IsDir(sPath &/ s) Then
      If Not recursive Then Continue
      AddFile(sPath &/ s)
    Else
  
      If s Ends ".desktop" Then 
        s = File.BaseName(s)
        If Not $aApps.Exist(s) Then 
          $aApps.Add(s)
          $cAppsPath[s] = sPath &/ s & ".desktop"
          '$cAppsPath[s] = sPath &/ s 
        Endif
          Else
        If (Settings["plugin_apps/desktop_from_extension"] <> CheckBox.true) Then

          IsDesktopFileOut = Global.isDesktopFile(sPath &/ s) 
          If IsDesktopFileOut Then
            If Not $aApps.Exist(s) Then 
              $aApps.Add(s)
              $cAppsPath[s] = sPath &/ s  
            Endif
          Endif
        Endif
      Endif
    Endif
  Next
  
End



Public Function GetAppName(sApp As String, Language As String) As String
  
  Dim hApp As DesktopApps = DesktopApps[sApp]
  
  If hApp.GetGenericName(Language) Then 
    Return hApp.GetGenericName(Language)
  Else
    If hApp.GetName(Language) Then
      Return hApp.GetName(Language)
    Else
      If hApp.GenericName Then 
        Return hApp.GenericName
      Endif
    Endif
  Endif
  
  Return hApp.Name
  
End

Public Function GetAppComment(sApp As String, Language As String) As String
  
  Dim hApp As DesktopApps = DesktopApps[sApp]
  
  If hApp.GetComment(Language) Then 
    Return hApp.GetComment(Language)
  Else
    If hApp.GetComment(Language) Then
      Return hApp.GetComment(Language)
    Else
      If hApp.Comment Then 
        Return hApp.Comment
      Endif
    Endif
  Endif
  
  Return hApp.Name
  
End

Static Public stop_get As Boolean = False
Static Public getting As Boolean = False


Static Public Function _get(AppName As String) As DesktopApps 
  
  Dim sLine As String
  Dim sAppPath As String
  Dim hDApps As DesktopApps

  Dim sLines As New String[]
  Dim i As Integer

  Dim f, v As String

  If IsNull($aApps) Then MakeAppList
  If $cApps.Exist(AppName) Then Return $cApps[AppName]
  'For Each sPath In GetDataDir()
  sAppPath = $cAppsPath[AppName]
  If Exist(sAppPath, True) Then 
    hDApps = New DesktopApps
    hDApps._$Path = sAppPath

    'find section "desktop entry"
    sLines = Split(File.Load(sAppPath), "\n")
    For i = 0 To sLines.max
      'hack to allow responsiviness
        getting = True
        Wait
        If stop_get Then 
          stop_get = False
          getting = False
          Return
        Endif

      sLine = sLines[i]
      If LCase(sLine) = "[desktop entry]" Then
        sLines.Extract(0, i + 1)
        Break
      Endif
    Next

    For Each sLine In sLines
      If sLine Begins "[" Then Break
      sLine = Trim(sLine)
      If sLine Begins "Exec" Then hDApps._$Exec = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Icon" Then hDApps._$IconName = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "NoDisplay" Then hDApps._$NoDisplay = CBool(Right(sLine, - InStr(sLine, "=")))
      If sLine Begins "DisplayOnlyIn" Then hDApps._$DisplayOnlyIn = CBool(Right(sLine, - InStr(sLine, "=")))
      If sLine Begins "NotShowIn" Then hDApps._$NotShowIn = CBool(Right(sLine, - InStr(sLine, "=")))

      If sLine Like "*=*" Then
        f = Left(sLine, InStr(sLine, "=") - 1)
        v = Right(sLine, - InStr(sLine, "="))
        Try hDApps.PropertyValue[f] = v
      Endif
    Next

    $cApps[AppName] = hDApps
    getting = False
    Return hDApps
  Endif
  
End




Static Public Function _next() As String
  
  If IsNull($aApps) Then MakeAppList()
  
  If Not Enum.Index Then 
    Enum.Index = 0
  Endif
  Enum.Index += 1
  If Enum.Index = $aApps.Count + 1 Then 
    Enum.Stop
    Return
  Endif
  Return $aApps[Enum.Index - 1]
  
End


Private Function IconName_Read() As String
  Return _$IconName
End


Static Private Sub GetDataDir() As String[]
  Dim sPrev, sDir As String  
  If Not $aDataDir Then
    $aDataDir = Split(Desktop.DataDir, ":", "", True)
    If Trim(Env["XDG_DATA_DIRS"]) <> "" Then 
      sPrev = ""
      For Each sDir In Split(Env["XDG_DATA_DIRS"], ":", "", True).Sort()
        If Right(sDir) <> "/" Then sDir &= "/"
        If sDir <> sPrev
          $aDataDir.Add(sDir)
          sPrev = sDir
        Endif
      Next
      '$aDataDir.Insert(Split(Env["XDG_DATA_DIRS"], ":", "", True))
        Else
      If $aDataDir.find(User.home & "/.local/share/") = -1 Then
        $aDataDir.add(User.home & "/.local/share/")
      Endif
      If $aDataDir.find("/usr/share/") = -1 Then
        $aDataDir.add("/usr/share/")
      Endif
      If $aDataDir.find("/usr/local/share/") = -1 Then
        $aDataDir.add("/usr/local/share/")
      Endif
    Endif
  Endif

  Return $aDataDir
End

Static Public Sub Reset(Optional otherdirs As String[])
  $aApps = Null
  $cApps.Clear
  $cAppsPath.Clear
  anotherdirs = otherdirs
End


Public Sub GetIcon(Optional Size As Integer = 16) As Image
  
  Dim sPath As String
  Dim hImage As Image
  
  Dim sDir As String
  Dim sSize As String
  Dim hSvg As SvgImage
  Dim s As String

  If $hImage Then Return $hImage
  If Exist(_$IconName, True) Then 
    If _$IconName Ends ".svg" Then
      hSvg = SvgImage.Load(_$IconName)
      hImage = New Image(Size, Size, Color.Transparent)
      Paint.Begin(hImage)
      hSvg.Resize(size, Size)
      hSvg.Paint
      Paint.End
    Else
      Try hImage = Image.Load(_$IconName)
    Endif
    
  Else
    If ((_$IconName Ends ".png") Or (_$IconName Ends ".xpm")) Then _$IconName = File.BaseName(_$IconName)
    'If _$IconName Ends ".png" Then _$IconName = File.BaseName(_$IconName)
    For Each sDir In [Desktop.DataDir &/ "icons", "/usr/share/icons"]
      'For Each sSize In [CStr(Size), "128", "64", "32"]      
      For Each sSize In [CStr(Size), "256", "128", "64", "48", "32" "22", "16", "8"]
        sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.png", sSize, _$IconName)
        If Exist(sPath, True) Then 
          Try hImage = Image.Load(sPath)
          If hImage Then Break
        Endif
        sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.xpm", sSize, _$IconName)
        If Exist(sPath, True) Then 
          Try hImage = Image.Load(sPath)
          If hImage Then Break
        Endif
      Next
      If hImage Then Break
    Next
    If Not hImage Then
      sPath = Subst("/usr/share/pixmaps/&1.png", _$IconName)
      If Exist(sPath, True) Then Try hImage = Image.Load(sPath)
    Endif

    If Not hImage Then
      sPath = Subst("/usr/share/pixmaps/&1.xpm", _$IconName)
      If Exist(sPath, True) Then Try hImage = Image.Load(sPath)
    Endif

  Endif
  If Not hImage Then
    'For Each s In ["apps", "actions", "places", "devices"]
    For Each s In ["apps", "actions", "places", "devices", "categories", "emblems", "mime", "misc", "status", "mimetypes"]
      Try hImage = Stock[CStr(Size) &/ s &/ _$IconName].Image
      If hImage Then Break
    Next
  Endif
  If Not hImage Then hImage = Stock[CStr(Size) &/ "program"].Image
  If hImage.W <> Size Or If hImage.H <> Size Then hImage = hImage.Stretch(Size, Size)
  $hImage = hImage
  Return hImage
Catch
  
End

Private Function NoDisplay_Read() As Boolean
  
  Return _$NoDisplay
  
End

Private Function DisplayOnlyIn_Read() As Boolean
  
  Return _$DisplayOnlyIn
  
End

Private Function NotShowIn_Read() As String
  
  Return _$NotShowIn
  
End

Public Sub Exec(Optional Args As String)
  
  Dim ars As String[]
  Dim i As Integer

  ars = Split(_$Exec, " ")
  If ars.Count > 0 Then
    
    If Not Args Then
      Exec [ars[0]]
    Else
      For i = 0 To ars.Max
        If ars[i] Begins "%" Then 
          Try ars.Remove(i, ars.Max - i)
          Break
        Endif
      Next
      If InStr(ars[ars.Max], "%") Then
        ars[ars.Max] = Args
      Endif
      Exec ars
    Endif
  Endif
  
End

Private Function Exec_R_Read() As String
  
  Return _$Exec
  
End


Private Function file_path_read() As String
  
  Return _$Path
  
End


Public Sub _free()
  
  '   $aDataDir = Null
  ' $cApps = Null
  ' $aApps = Null
  ' $cAppsPath = Null
  
End


Public Function Get(field As String, Optional localized As Boolean = True) As Variant
  Dim out As Variant
  If localized Then
    Try out = PropertyValue[field & "[" & sLanguage[0] & "_" & sLanguage[1] & "]"]
    If out <> Null Then Return out
    Try out = PropertyValue[field & "[" & sLanguage[0] & "]"]
    If out <> Null Then Return out
  Endif
  Try out = PropertyValue[field]

  Return out
End

